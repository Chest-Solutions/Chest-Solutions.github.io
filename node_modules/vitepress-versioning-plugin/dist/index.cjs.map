{"version":3,"sources":["../src/index.ts","../src/rewrites.ts","../src/sidebars.ts","../src/switcher.ts","../src/defaults.ts"],"sourcesContent":["import clc from \"cli-color\";\r\nimport _ from \"lodash\";\r\nimport fs from \"node:fs\";\r\nimport path from \"node:path\";\r\nimport { createLogger } from \"vite\";\r\nimport { DefaultTheme, UserConfig } from \"vitepress\";\r\nimport { generateVersionRewrites } from \"./rewrites\";\r\nimport { generateVersionSidebars } from \"./sidebars\";\r\nimport { generateVersionSwitcher } from \"./switcher\";\r\nimport { Versioned } from \"./types\";\r\nimport { defaultConfig, defaultThemeConfig } from \"./defaults\";\r\n// import { generateVersionedNavbars } from \"./navbars\";\r\n\r\n// TODO: Fix nav bar elements (not versioned) - Seems not to be possible due to VitePress limitation...\r\n// TODO: Changing version does not preserve language\r\n// TODO: Change URL format to `/version/lang/file`\r\n\r\nexport { Versioned };\r\n\r\n/**\r\n * Processes the default theme config with versioning config.\r\n * @param config The default theme config with versioning config.\r\n * @param dirname The value of __dirname when used from any typescript file in the `.vitepress` folder and ONLY the `.vitepress` folder.\r\n * @returns The default theme config with versioning config.\r\n */\r\nexport default function defineVersionedConfig(\r\n  config: Versioned.Config,\r\n  dirname: string\r\n): UserConfig<DefaultTheme.Config> {\r\n  const logger = createLogger();\r\n\r\n  // TODO: Does this convert to UserConfig correctly?\r\n  const configBackup = { ...config };\r\n  config = _.defaultsDeep(config, defaultConfig);\r\n\r\n  // Load all the versions from the \"versions\" folder.\r\n  const versions: Versioned.Version[] = [];\r\n  const versionsFolder = path.resolve(dirname, \"..\", \"versions\");\r\n\r\n  if (!fs.existsSync(versionsFolder)) {\r\n    fs.mkdirSync(versionsFolder);\r\n    fs.writeFileSync(path.resolve(versionsFolder, \".gitkeep\"), \"\");\r\n  }\r\n\r\n  const versionFolders = fs\r\n    .readdirSync(versionsFolder, { withFileTypes: true })\r\n    .filter((dirent) => dirent.isDirectory());\r\n  versions.push(...versionFolders.map((dirent) => dirent.name));\r\n\r\n  // Convert all `VersionedThemeConfig`s to `DefaultTheme.Config`s\r\n  for (let themeConfig of [\r\n    config.themeConfig,\r\n    ...Object.values(config.locales ?? {}).map((locale) => locale.themeConfig),\r\n  ]) {\r\n    if (!themeConfig) continue;\r\n\r\n    themeConfig = _.defaultsDeep(\r\n      themeConfig,\r\n      defaultThemeConfig\r\n    ) as Versioned.ThemeConfig;\r\n\r\n    // // Generate navbars\r\n    // themeConfig.nav = [\r\n    //   ...themeConfig.nav ?? [],\r\n    //   ...generateVersionedNavbars(\r\n    //     config.versioning.navbars!,\r\n    //     dirname,\r\n    //     versions,\r\n    //     Object.keys(config.locales ?? {})\r\n    //   ).flat(),\r\n    // ]\r\n\r\n    // console.log(themeConfig.nav)\r\n\r\n    // Generate the version switcher\r\n    const versionSwitcher = generateVersionSwitcher(\r\n      themeConfig.versionSwitcher!,\r\n      versions,\r\n      config.versioning.latestVersion!\r\n    );\r\n    if (versionSwitcher) {\r\n      themeConfig.nav ??= [];\r\n      themeConfig.nav.push(versionSwitcher);\r\n    }\r\n\r\n    // Add versioning props to navbar items\r\n    if (themeConfig.nav) {\r\n      themeConfig.nav = themeConfig.nav.map((item: any) => {\r\n        if (item.component) {\r\n          item.props ??= {};\r\n          item.props.versioningPlugin = {\r\n            versions,\r\n            latestVersion: config.versioning.latestVersion!,\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n    }\r\n\r\n    // Generate the sidebars\r\n    if (Array.isArray(themeConfig.sidebar)) {\r\n      logger.error(\r\n        clc.red(`[vitepress-plugin-versioning]`) +\r\n          \" The sidebar cannot be an array. Please use a DefaultTheme.MultiSidebar object where the root ('/') is your array.\"\r\n      );\r\n      logger.info(\r\n        clc.yellow(`[vitepress-plugin-versioning]`) +\r\n          \" Versioned sidebar preperation failed, disabling versioning.\"\r\n      );\r\n      return configBackup; // TODO: This entirely disables versioning, is this intentional?\r\n    } else {\r\n      themeConfig.sidebar = {\r\n        ...themeConfig.sidebar,\r\n        ...generateVersionSidebars(\r\n          config.versioning.sidebars!,\r\n          dirname,\r\n          versions,\r\n          Object.keys(config.locales ?? {})\r\n        ),\r\n      };\r\n    }\r\n  }\r\n\r\n  // Generate the rewrites\r\n  config.rewrites = {\r\n    ...config.rewrites,\r\n    ...generateVersionRewrites(\r\n      config.versioning.rewrites!,\r\n      dirname,\r\n      versions,\r\n      Object.keys(config.locales ?? {})\r\n    ),\r\n  };\r\n\r\n  try {\r\n    if(config.versioning.sidebars) {\r\n      if(config.versioning.sidebars.sidebarContentProcessor) {\r\n        // For all sidebars, in locales and main themeConfig\r\n        for (const locale of Object.keys(config.locales ?? {})) {\r\n          if(config.locales?.[locale]?.themeConfig) {\r\n            // @ts-ignore\r\n            config.locales[locale].themeConfig.sidebar = config.versioning.sidebars.sidebarContentProcessor!(config.locales[locale].themeConfig.sidebar as DefaultTheme.SidebarMulti);\r\n          } \r\n        }\r\n      }\r\n    }\r\n  } catch (e) {\r\n    logger.error(\"Something went wrong when processing the sidebar content.\")\r\n    logger.error(e as any);\r\n    logger.info(\"Reverting to pre-processed sidebar configs.\");\r\n  }\r\n\r\n  // For all components within themeConfig.nav and locale.themeConfig.nav, insert version information into the props.\r\n  if(config?.themeConfig?.nav) {\r\n  \r\n    // Recursive map function to process all items in the nav bar.\r\n    const processNavbarItemRecursive = (navbarItem: any): DefaultTheme.NavItem => {\r\n    \r\n      if (navbarItem?.items) {\r\n        navbarItem.items = navbarItem.items.map((item: any) =>\r\n          processNavbarItemRecursive(item)\r\n        ) as (DefaultTheme.NavItemWithLink | DefaultTheme.NavItemChildren)[];\r\n      }\r\n\r\n      if (navbarItem?.component) {\r\n        navbarItem.props ??= {};\r\n        navbarItem.props.versioningPlugin = {\r\n          versions,\r\n          latestVersion: config.versioning.latestVersion!,\r\n        }\r\n      }\r\n    \r\n      return navbarItem;\r\n    }\r\n\r\n    // Process all items in the nav bar.\r\n    config.themeConfig.nav = config.themeConfig.nav.map((item) => processNavbarItemRecursive(item));\r\n  }\r\n\r\n\r\n  return config;\r\n}\r\n","import fs from \"node:fs\";\r\nimport path from \"node:path\";\r\nimport { Versioned } from \"./types\";\r\n\r\nfunction getFilesRecursively(dirname: string, locales: string[]): string[] {\r\n  let files: string[] = [];\r\n\r\n  for (const entry of fs.readdirSync(dirname, { withFileTypes: true })) {\r\n    const entryPath = `${dirname}/${entry.name}`;\r\n\r\n    if (entry.isDirectory()) {\r\n      // Skip the locale folders\r\n      // TODO: some projects may place translations in paths different to this\r\n      if (locales.includes(entry.name)) {\r\n        continue;\r\n      }\r\n\r\n      files = [...files, ...getFilesRecursively(entryPath, locales)];\r\n    } else {\r\n      files.push(entryPath);\r\n    }\r\n  }\r\n\r\n  return files;\r\n}\r\n\r\n/**\r\n * Generates vitepress rewrites for all versions in the \"versions\" folder.\r\n * The rewrites are used to format the URLs in `versions` to be more user-friendly.\r\n * @returns {Record<string, string>} A map of rewrite sources to their destinations.\r\n */\r\nexport function generateVersionRewrites(\r\n  config: Versioned.RewritesConfig | false,\r\n  dirname: string,\r\n  versions: Versioned.Version[],\r\n  locales: string[] = []\r\n): Record<string, string> {\r\n  const versionRewrites: Record<string, string> = {};\r\n  if (config === false) return versionRewrites;\r\n\r\n  const versionsDir = path.resolve(dirname, \"..\", \"versions\");\r\n\r\n  // Generate rewrites for each version's files.\r\n  for (const version of versions) {\r\n    // Get all files recursively in the version folder\r\n    const files = getFilesRecursively(\r\n      path.posix.join(versionsDir, version),\r\n      locales\r\n    );\r\n\r\n    for (const rewriteSource of files.map((filePath) =>\r\n      filePath.replace(versionsDir, \"versions\")\r\n    )) {\r\n      versionRewrites[rewriteSource] = config.rewriteProcessor!(\r\n        rewriteSource,\r\n        version\r\n      );\r\n    }\r\n\r\n    // Manage locale rewrites\r\n    for (const locale of locales) {\r\n      const versionLocalePath = path.resolve(\r\n        versionsDir,\r\n        version,\r\n        config.localePrefix!,\r\n        locale\r\n      );\r\n\r\n      if (!fs.existsSync(versionLocalePath)) continue;\r\n\r\n      const localeFiles = getFilesRecursively(\r\n        path.resolve(versionsDir, version, config.localePrefix!, locale),\r\n        locales\r\n      );\r\n\r\n      const localeRewriteSources = localeFiles.map((filePath) =>\r\n        filePath.replace(versionsDir, \"versions\")\r\n      );\r\n\r\n      for (const rewriteSource of localeRewriteSources) {\r\n        versionRewrites[`${rewriteSource}`] = config.localeRewriteProcessor!(\r\n          rewriteSource,\r\n          version,\r\n          locale\r\n        ).replace(`/${config.localePrefix!}`, \"\");\r\n      }\r\n    }\r\n  }\r\n\r\n  // console.log(versionRewrites)\r\n\r\n  return versionRewrites;\r\n}\r\n","import JSON5 from \"json5\";\r\nimport fs from \"node:fs\";\r\nimport path from \"node:path\";\r\nimport { DefaultTheme } from \"vitepress\";\r\nimport { Versioned } from \"./types\";\r\n\r\n/**\r\n * Replaces all links in the sidebar with their versioned equivalents.\r\n * @example `{link: '/test'}` becomes `{link: '/0.1.0/test'}`\r\n * @param sidebar The sidebar to replace links in.\r\n * @param version The version to prepend to all links.\r\n * @returns {DefaultTheme.SidebarItem[]} The sidebar with all links prepended with the version.\r\n */\r\nfunction replaceLinksRecursive(\r\n  sidebar: Versioned.SidebarItem[],\r\n  config: Versioned.SidebarConfig,\r\n  version: Versioned.Version\r\n): DefaultTheme.SidebarItem[] {\r\n  // Prepend the version to all links. `{VERSION}/$link`\r\n  return sidebar.map((item) => {\r\n    if (item.process === false) {\r\n      return item;\r\n    }\r\n\r\n    if (item.link) {\r\n      item.link = config.sidebarUrlProcessor!(item.link, version);\r\n    }\r\n\r\n    if (item.items) {\r\n      item.items = replaceLinksRecursive(item.items, config, version);\r\n    }\r\n\r\n    return item;\r\n  });\r\n}\r\n\r\n/**\r\n * Gets the sidebar for a specific version.\r\n * This function will look for a sidebar.json file in the specified version's folder, or else return an empty sidebar.\r\n * @param version Get the sidebar for a specific version.\r\n * @returns {DefaultTheme.SidebarItem[]} The sidebar for the specified version.\r\n */\r\nfunction getSidebar(\r\n  config: Versioned.SidebarConfig,\r\n  dirname: string,\r\n  version: Versioned.Version,\r\n  locale: string\r\n): DefaultTheme.Sidebar {\r\n  const sidebarPath = path.resolve(\r\n    dirname,\r\n    \"..\",\r\n    config.sidebarPathResolver!(\r\n      version + (locale === \"root\" ? \"\" : `-${locale}`)\r\n    )\r\n  );\r\n\r\n  if (fs.existsSync(sidebarPath)) {\r\n    const sidebar = JSON5.parse(fs.readFileSync(sidebarPath, \"utf-8\"));\r\n\r\n    if (Array.isArray(sidebar)) {\r\n      // Replace all links in the sidebar with their versioned equivalents.\r\n      return replaceLinksRecursive(\r\n        sidebar as Versioned.SidebarItem[],\r\n        config,\r\n        (locale === \"root\" ? \"\" : `${locale}/`) + version\r\n      );\r\n    } else {\r\n      // Must be a multisidebar instance.\r\n      const multiSidebar = sidebar as DefaultTheme.SidebarMulti;\r\n\r\n      // Replace all links in the sidebar with their versioned equivalents.\r\n      Object.keys(multiSidebar).forEach((key) => {\r\n        multiSidebar[key] = replaceLinksRecursive(\r\n          multiSidebar[key] as Versioned.SidebarItem[],\r\n          config,\r\n          (locale === \"root\" ? \"\" : `${locale}/`) + version\r\n        );\r\n      });\r\n\r\n      return multiSidebar;\r\n    }\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\n/**\r\n * Generates a sidebar for each version in the \"versions\" folder.\r\n * @returns {DefaultTheme.SidebarMulti} A map of versions to their sidebars.\r\n */\r\nexport function generateVersionSidebars(\r\n  config: Versioned.SidebarConfig | false,\r\n  dirname: string,\r\n  versions: Versioned.Version[],\r\n  locales: string[]\r\n): DefaultTheme.SidebarMulti {\r\n  const versionSidebars: DefaultTheme.SidebarMulti = {};\r\n  if (config === false) return versionSidebars;\r\n\r\n  for (const version of versions) {\r\n    for (const locale of locales) {\r\n      const sidebar = getSidebar(config, dirname, version, locale);\r\n\r\n      if (Array.isArray(sidebar)) {\r\n        versionSidebars[\r\n          (locale === \"root\" ? \"\" : `/${locale}`) + `/${version}/`\r\n        ] = sidebar;\r\n      } else {\r\n        Object.keys(sidebar).forEach((key) => {\r\n          versionSidebars[\r\n            (locale === \"root\" ? \"\" : `/${locale}`) + `/${version}${key}`\r\n          ] = (sidebar as DefaultTheme.SidebarMulti)[key];\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return versionSidebars;\r\n}\r\n","import { DefaultTheme } from \"vitepress\";\r\nimport { Versioned } from \"./types\";\r\n\r\n/**\r\n * Generates a nav item for the version switcher, which contains all versions in the \"versions\" folder and the latest version.\r\n * @returns {DefaultTheme.NavItem} A nav item that contains all versions in the \"versions\" folder.\r\n */\r\nexport function generateVersionSwitcher(\r\n  config: Versioned.SwitcherConfig | false,\r\n  versions: Versioned.Version[],\r\n  latestVersion: Versioned.Version | null\r\n): DefaultTheme.NavItem | null {\r\n  if (config === false) {\r\n    return null;\r\n  }\r\n\r\n  const versionSwitcher: DefaultTheme.NavItem = {\r\n    text: config.text,\r\n    items: [],\r\n  };\r\n\r\n  if (config.includeLatestVersion) {\r\n    versionSwitcher.items.push({\r\n      text: latestVersion === null ? \"Latest\" : `${latestVersion} (latest)`,\r\n      link: \"/\",\r\n    });\r\n  }\r\n\r\n  for (const version of versions) {\r\n    versionSwitcher.items.push({\r\n      text: version,\r\n      link: `/${version}/`,\r\n    });\r\n  }\r\n\r\n  return versionSwitcher;\r\n}\r\n","import { Versioned } from \"./types\";\r\n\r\nconst defaultThemeConfig: Versioned.ThemeConfig = {\r\n  versionSwitcher: {\r\n    text: \"Switch Version\",\r\n    includeLatestVersion: true,\r\n  },\r\n};\r\n\r\nconst defaultConfig: Versioned.Config = {\r\n  versioning: {\r\n    latestVersion: null,\r\n    sidebars: {\r\n      processSidebarURLs: true,\r\n      sidebarPathResolver: (version: Versioned.Version) =>\r\n        `.vitepress/sidebars/versioned/${version}.json`,\r\n      sidebarUrlProcessor: (url: string, version: Versioned.Version) =>\r\n        `/${version}${url}`,\r\n    },\r\n    // navbars: {\r\n    //   processNavbarURLs: true,\r\n    //   navbarUrlProcessor: (url: string, version: Version) =>\r\n    //     `/${version}${url}`,\r\n    //   navbarPathResolver: (version: Version) =>\r\n    //     `.vitepress/navbars/versioned/${version}.json`,\r\n    // },\r\n    rewrites: {\r\n      localePrefix: \"\",\r\n      localeRewriteProcessor: (\r\n        inputFilePath: string,\r\n        _version: Versioned.Version,\r\n        locale: string\r\n      ) =>\r\n        `${locale}/` +\r\n        inputFilePath.replace(\"versions/\", \"\").replace(`${locale}/`, \"\"),\r\n      rewriteProcessor: (inputFilePath: string, _version: Versioned.Version) =>\r\n        inputFilePath.replace(\"versions/\", \"\"),\r\n    },\r\n  },\r\n};\r\n\r\nexport { defaultConfig, defaultThemeConfig };"],"mappings":"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","names":["import_node_fs","import_node_path","fs","path","import_node_fs","import_node_path","path","fs","JSON5","_","path","fs","_a","clc"]}